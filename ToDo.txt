1. Add profile picture - create image uploading component
2. contact file (interested in work, pulled from the page
4. Check for duplicate files
5. Package authentication as service
6. Package AWS upload as service
7. Package firebase as service (especially getting artists and works)
8. Implement firebase rules for maximum children
9. Make gallery creator component reusable for user panel (should be easy)
    When done rewrite old gallery with same id.
10.  Clean up all services using those from database.service


* Maybe don't have users re-visit pieces they already rated if logged in?
* Galleries can be creator or deleted, but not modified!!!
    This has some problems if works change?  need to keep only references to
    works because of this maybe?  Possibly okay because price and stuff aren't
    listed and it links back, we will leave for now...

* NEED TO DO TESTING
* NEED TO BUILD BETTER WORKFLOW POSSIBLY? (Maybe gulp)?

* FIRECHAT would be great for a live chat system, not really what we want for messages?

Structure of database
-Galleries
-S3auth
-artSearch
-users
-works
-messages
 -- keys are user ids, can write anywhere, on read your own


goal of database, keep everything as flat as possible and store references around. (or maybe dont store references, rely on queries from database when speed doesn't matter maybe?)  Also, it is okay to have rendundancy, for example in the works, but just make sure to keep everything updated together.

for (var i in mes){var newone = ref.push(mes[i]);var newone2 = newone.toString(); ref1.push({'reciver':mes[i]['reciever_id'], 'id':newone2.split('/').pop(-1)})}